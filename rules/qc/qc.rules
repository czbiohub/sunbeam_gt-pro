# -*- mode: Snakemake -*-
#
# Illumina quality control rules

import subprocess
from collections import OrderedDict
import pandas
from sunbeamlib import reports


### HMP dataset merge data together
with open("/mnt/chunyu20TB/HMP1/hmp_runs.txt") as f:
    RUNs = f.read().splitlines()

rule _all_cat:
    input:
        expand(str(Cfg['all']['output_fp']/'dnabc'/'{run}_{rp}.fastq.gz'), run=RUNs, rp=['1','2'])

rule cat_fastq:
    input:
        "/mnt/chunyu20TB/HMP1/hmp_sample_run_lookup.txt"
    output:
        str(Cfg['all']['output_fp']/'dnabc'/'{run}_1.fastq.gz'),
        str(Cfg['all']['output_fp']/'dnabc'/'{run}_2.fastq.gz')
    params:
        run = "{run}",
	download_fp = str(Cfg['all']['output_fp']/'download')
    run:
        R1 = []
        R2 = []
        with open(input[0]) as f:
            reader = csv.reader(f, delimiter='\t')
            for row in reader:
                if row[0] == params.run:
                    R1.append(params.download_fp + '/' + row[1] + "_1.fastq.gz")
                    R2.append(params.download_fp + '/' + row[1] + "_2.fastq.gz")
        
        cmd1 = 'cat ' + ' '.join(R1) + ' > ' + output[0]
        cmd2 = 'cat ' + ' '.join(R2) + ' > ' + output[1]
	print(cmd1)
        subprocess.call(cmd1, shell=True)
        print(cmd2)
        subprocess.call(cmd2, shell=True)
 

rule all_qc:
    """Runs trimmomatic and fastqc on all input files."""
    input:
        [TARGET_QC, str(QC_FP/'preprocess.tsv')]

ruleorder: adapter_removal_paired > adapter_removal_unpaired
        
rule adapter_removal_unpaired:
    input:
        lambda wildcards: Samples[wildcards.sample]['1']
    params:
        tmp = str(QC_FP/'01_cutadapt'/'{sample}_1.fastq'),
    log: str(QC_FP/'log'/'cutadapt'/'{sample}.log') 
    output:
        str(QC_FP/'01_cutadapt'/'{sample}_1.fastq.gz')
    run:
        fwd_adapters = Cfg['qc'].get('fwd_adapters')
        rev_adapters = Cfg['qc'].get('rev_adapters')
        if fwd_adapters or rev_adapters:
            overlap = float('inf')
            if fwd_adapters:
                overlap = min(min(len(a) for a in fwd_adapters), overlap)
                fwd_adapter_str = " ".join(expand(
                    "-b {adapter}", adapter=Cfg['qc']['fwd_adapters']))
            if rev_adapters:
                overlap = min(min(len(a) for a in rev_adapters), overlap)
                rev_adapter_str = " ".join(expand(
                    "-g {adapter}", adapter=Cfg['qc']['rev_adapters']))
            shell("""
            cutadapt --discard-trimmed -O {overlap} \
            {fwd_adapter_str} {rev_adapter_str} \
            -o {params.tmp} \
            {input} \
            > >(tee -a {log}) 2> >(tee -a {log} >&2) 
            gzip {params.tmp}
            """)
        else:
            shell("ln -s {input} {output}")
    
rule adapter_removal_paired:
    input:
        r1 = lambda wildcards: Samples[wildcards.sample]['1'],
        r2 = lambda wildcards: Samples[wildcards.sample]['2']
    params:
        r1 = str(QC_FP/'01_cutadapt'/'{sample}_1.fastq.gz'),
        r2 = str(QC_FP/'01_cutadapt'/'{sample}_2.fastq.gz')
    log: str(QC_FP/'log'/'cutadapt'/'{sample}.log') 
    output:
        gr1 = str(QC_FP/'01_cutadapt'/'{sample}_1.fastq.gz'),
        gr2 = str(QC_FP/'01_cutadapt'/'{sample}_2.fastq.gz')
    run:
        fwd_adapters = Cfg['qc']['fwd_adapters']
        rev_adapters = Cfg['qc']['rev_adapters']
        if fwd_adapters or rev_adapters:
            overlap = float('inf')
            if fwd_adapters:
                overlap = min(min(len(a) for a in fwd_adapters), overlap)
                fwd_adapter_str = " ".join(expand(
                    "-b {adapter}", adapter=Cfg['qc']['fwd_adapters']))
            if rev_adapters:
                overlap = min(min(len(a) for a in rev_adapters), overlap)
                rev_adapter_str = " ".join(expand(
                    "-B {adapter}", adapter=Cfg['qc']['rev_adapters']))
            shell("""
            cutadapt --discard-trimmed -O {overlap} \
            {fwd_adapter_str} {rev_adapter_str} \
            -o {params.r1} -p {params.r2} \
            {input.r1} {input.r2} \
            > >(tee -a {log}) 2> >(tee -a {log} >&2) 
            gzip {params.r1}
            gzip {params.r2}
            """)
        else:
            shell("""
            ln -s {input.r1} {output.gr1} && ln -s {input.r2} {output.gr2}
            """)

ruleorder: trimmomatic_paired > trimmomatic_unpaired
        
rule trimmomatic_unpaired:
    input:
        str(QC_FP/'01_cutadapt'/'{sample}_1.fastq.gz')
    output:
        str(QC_FP/'02_trimmomatic'/'{sample}_1.fastq.gz')
    log: str(QC_FP/'log'/'trimmomatic'/'{sample}.out')
    params:
        sw_start = Cfg['qc']['slidingwindow'][0],
        sw_end = Cfg['qc']['slidingwindow'][1]
    threads:
        Cfg['qc']['threads']
    shell:
        """
        trimmomatic \
        SE -threads {threads} -phred33 \
        {input} {output} \
        ILLUMINACLIP:{Cfg[qc][adapter_fp]}:2:30:10:8:true \
        LEADING:{Cfg[qc][leading]} \
        TRAILING:{Cfg[qc][trailing]} \
        SLIDINGWINDOW:{params.sw_start}:{params.sw_end} \
        MINLEN:{Cfg[qc][minlen]} \
        > >(tee -a {log}) 2> >(tee -a {log} >&2)
        """

            
rule trimmomatic_paired:
    input:
        r1 = str(QC_FP/'01_cutadapt'/'{sample}_1.fastq.gz'),
        r2 = str(QC_FP/'01_cutadapt'/'{sample}_2.fastq.gz')
    output:
        pair_r1 = str(QC_FP/'02_trimmomatic'/'{sample}_1.fastq.gz'),
        pair_r2 = str(QC_FP/'02_trimmomatic'/'{sample}_2.fastq.gz'),
        unpair_r1 = temp(str(QC_FP/'02_trimmomatic'/'unpaired'/'{sample}_1_unpaired.fastq.gz')),
        unpair_r2 = temp(str(QC_FP/'02_trimmomatic'/'unpaired'/'{sample}_2_unpaired.fastq.gz'))
    log: str(QC_FP/'log'/'trimmomatic'/'{sample}.out'),
    params:
        sw_start = Cfg['qc']['slidingwindow'][0],
        sw_end = Cfg['qc']['slidingwindow'][1]
    threads:
        Cfg['qc']['threads']
    shell:
        """
        trimmomatic \
        PE -threads {threads} -phred33 \
        {input.r1} {input.r2} \
        {output.pair_r1} {output.unpair_r1} \
        {output.pair_r2} {output.unpair_r2} \
        ILLUMINACLIP:{Cfg[qc][adapter_fp]}:2:30:10:8:true \
        LEADING:{Cfg[qc][leading]} \
        TRAILING:{Cfg[qc][trailing]} \
        SLIDINGWINDOW:{params.sw_start}:{params.sw_end} \
        MINLEN:{Cfg[qc][minlen]} \
        > >(tee -a {log}) 2> >(tee -a {log} >&2)
        """

rule fastqc:
    input:
        reads = expand(
            str(QC_FP/"02_trimmomatic"/"{{sample}}_{rp}.fastq.gz"),
            rp=Pairs)
    output:
        expand(
            str(QC_FP/'reports'/'{{sample}}_{rp}_fastqc/fastqc_data.txt'),
            rp=Pairs)
    params:
        outdir = str(QC_FP/'reports')
    shell:
        "fastqc -o {params.outdir} {input.reads} -extract"

rule find_low_complexity:
    input:
        expand(
            str(QC_FP/'02_trimmomatic'/'{{sample}}_{rp}.fastq.gz'),
            rp=Pairs)
    output:
        str(QC_FP/'log'/'komplexity'/'{sample}.filtered_ids')
    shell:
        """
        for rp in {input}; do
          gzip -dc $rp | kz | \
          awk '{{ if ($4<{Cfg[qc][kz_threshold]}) print $1 }}' >> {output}
        done
        """

rule remove_low_complexity:
    input:
        reads = str(QC_FP/'02_trimmomatic'/'{sample}_{rp}.fastq.gz'),
        ids = str(QC_FP/'log'/'komplexity'/'{sample}.filtered_ids')
    output:
        str(QC_FP/'03_komplexity'/'{sample}_{rp}.fastq.gz')
    shell:
        """
        gzip -dc {input.reads} | rbt fastq-filter {input.ids} |\
        gzip > {output}
        """

rule qc_final:
    input:
        str(QC_FP/'03_komplexity'/'{sample}_{rp}.fastq.gz')
    output:
        str(QC_FP/'cleaned'/'{sample}_{rp}.fastq.gz')
    shell:
        """cp {input} {output}"""

rule clean_qc:
    input:
        expand(
            str(QC_FP/'cleaned'/'{sample}_{rp}.fastq.gz'),
            sample=Samples.keys(), rp=Pairs)
    params:
        cutadapt_fp = str(QC_FP/'01_cutadapt'),
        trimmomatic_fp = str(QC_FP/'02_trimmomatic'),
        komplexity_fp = str(QC_FP/'03_komplexity')
    output:
        touch(".qc_cleaned")
    shell:
        """
        rm -r {params.cutadapt_fp} && \
        rm -r {params.trimmomatic_fp} && \
        rm -r {params.komplexity_fp}
        """

rule qc_reads:
    input:
       r1 = str(QC_FP/'cleaned'/'{sample}_1.fastq.gz'),
       ids = str(QC_FP/'log'/'komplexity'/'{sample}.filtered_ids')
    output:
       log = str(QC_FP/'log'/'QCed'/'{sample}_1.txt')
    run:
        filtered = int(subprocess.getoutput("cat {} | wc -l".format(input.ids)).strip())
        cleaned = int(str(subprocess.getoutput("zcat {} | wc -l".format(input.r1))).strip())//4
        with open(output.log, 'w') as log:
            log.write("{}\n".format("\t".join( ["filtered","cleaned"] )))
	    log.write("{}\n".format("\t".join( map(str, [filtered, cleaned]) )))       


def summarize_qual_qc(tfile, qfile):
    tname = os.path.basename(tfile).split('.out')[0]
    qname = os.path.basename(qfile).split('.txt')[0]
    with open(tfile) as tf:
        with open(qfile) as jf:
            trim_data = reports.parse_trim_summary_paired(tf)
            qc_data = reports.parse_decontam_log(jf)
    return(pandas.DataFrame(OrderedDict(trim_data, **(qc_data)), index=[tname]))


rule report_qc:
    input:
       trim_files = expand(str(QC_FP/'log'/'trimmomatic'/'{sample}.out'), sample=sorted(Samples.keys())),
       qc_files = expand(str(QC_FP/'log'/'QCed'/'{sample}_1.txt'), sample=sorted(Samples.keys()))
    output:
       log = str(QC_FP/'preprocess.tsv')
    run:
       summary_list = [ summarize_qual_qc(q, d) for q, d in zip(input.trim_files, input.qc_files)]
       _reports = pandas.concat(summary_list)
       _reports.to_csv(output[0], sep='\t', index_label='SampleID')
